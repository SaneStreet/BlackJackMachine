// Class : Spil

/*
    Indeholder spillets logik og flow
*/

#nullable enable
class Spil
{
    private Kortbunke kortbunke = new Kortbunke();
    private Spiller dealer = new Spiller("Dealer");
    private Spiller? spiller;
    string titel = "üé¥ BlackJackMachine 1.0 üÉè\n"; 

    // Funktionen der k√∏rer hele programmet
    public void Run()
    {
        // Menu med valgmuligheder
        while (true)
        {
            Console.Clear();
            Console.WriteLine(titel);
            Console.WriteLine("V√¶lg en mulighed: (1-3)");
            Console.WriteLine(" 1. Nyt spil");
            Console.WriteLine(" 2. Se regler");
            Console.WriteLine(" 3. Afslut\n");
            int valg = Convert.ToInt32(Console.ReadLine());

            // Switch case der h√•ndtere valg fra menuen
            switch (valg)
            {
                // Starter spillet og spilrunder
                case 1:
                    Console.Clear();
                    Console.WriteLine(titel);
                    Console.WriteLine("Navn p√• spiller?: \n");
                    string? nySpiller = Console.ReadLine();
                    if (nySpiller == "" || nySpiller == null)
                    {
                        nySpiller = "Spiller";
                    }

                    spiller = new Spiller(nySpiller);

                    Console.Clear();
                    bool iSpil = true;

                    while (iSpil)
                    {
                        SpilRunde();

                        Console.WriteLine("\nVil du spille igen? (J/N): ");
                        string nytspil = Console.ReadLine()?.Trim().ToLower() ?? "n";
                        iSpil = nytspil == "j";
                        Console.Clear();
                    }
                    break;
                // Fremviser reglerne for Blackjack
                case 2:
                    Console.Clear();
                    Console.WriteLine(titel);
                    Console.WriteLine("Regler for Blackjack: ");
                    Console.WriteLine("- M√•let er at f√• en h√•ndv√¶rdi t√¶ttere p√• 21 end dealeren, uden at overskride 21.");
                    Console.WriteLine("- Kort 2-10 har deres p√•lydende v√¶rdi, billedkort (J, Q, K) giver 10 point, og et es (A) kan v√¶re 1 eller 11, afh√¶ngigt af hvad der er bedst for h√•nden.");
                    Console.WriteLine("- Hvis spillereneller dealeren overstiger 21 (bust), taber de √∏jeblikkeligt.");
                    Console.WriteLine("- N√•r spilleren v√¶lger stand, tr√¶kker dealeren kort, indtil h√•nden har en v√¶rdi p√• mindst 17.");
                    Console.WriteLine("- Hvis ingen g√•r bust, vinder den med den h√∏jeste v√¶rdi. Uafgjort resulterer i en push (ingen vinder)");
                    Console.WriteLine("\nTryk p√• en tast for at forts√¶tte..");
                    Console.ReadKey();
                    break;
                // Afslutter programmet
                case 3:
                    Console.Clear();
                    Console.WriteLine("Tak for nu. Byebye. üëã");
                    Environment.Exit(0);
                    break;
                // Ved andre valg end mulighederne, sender fejlbesked
                default:
                    Console.WriteLine("Ugyldigt valg. Tryk p√• en tast for at forts√¶tte..");
                    Console.ReadLine();
                    break;
            }

        }
    }

    // Funktion der k√∏rer spilrunderne
    public void SpilRunde()
    {
        // Tjek for hvis spillernavn er tom, og derefter t√∏m begges h√¶nder til ny runde
        Console.WriteLine(titel);
        if (spiller != null) // hvis spiller ikke er null, s√• forts√¶t
        {
            spiller.T√∏mH√•nd();
        }
        dealer.T√∏mH√•nd();
        kortbunke = new Kortbunke();

        // starter kortuddeling (2 til hver)
        spiller.H√•nd.Add(kortbunke.Tr√¶kKort());
        dealer.H√•nd.Add(kortbunke.Tr√¶kKort());
        spiller.H√•nd.Add(kortbunke.Tr√¶kKort());
        dealer.H√•nd.Add(kortbunke.Tr√¶kKort());

        // Fort√¶ller spiller hvilke kort dealer og spiller har
        Console.WriteLine($" - Dealers h√•nd: {dealer.H√•nd.kortP√•H√•nden[0]} üÇ†");
        Console.WriteLine($" - {spiller.Navn}'s h√•nd: {spiller.H√•nd} ({spiller.H√•nd.VinderV√¶rdi()})");

        // Checker for blackjack
        if (spiller.H√•nd.ErBlackjack() || dealer.H√•nd.ErBlackjack())
        {
            DealerH√•nd();
            // Spiller vinder ved blackjack
            if (spiller.H√•nd.ErBlackjack() && !dealer.H√•nd.ErBlackjack())
            {
                Console.WriteLine("Blackjack! Du vandt! üëè");
            }
            // Dealer vinder ved blakcjack
            else if (!spiller.H√•nd.ErBlackjack() && dealer.H√•nd.ErBlackjack())
            {
                Console.WriteLine("Dealer har Blackjack! Du tabte! üòû");
            }
            // Uafgjort hvis begge har blackjack
            else
            {
                Console.WriteLine("Begge har Blackjack! Uafgjort! ü§ù");
            }
            return;
        }

        // S√¶tter hanlding som ubestemt
        bool spillerHandling = false;
        // While l√∏kke til n√•r spiller tager et valg
        while (!spillerHandling)
        {
            // Trimmer svar fra spiller til sm√• bogstaver
            Console.WriteLine("Handling? (hit/stand)");
            string handling = Console.ReadLine()?.Trim().ToLower() ?? "stand";
            
            // Hvis "hit"
            if (handling == "hit")
            {
                // Spiller tr√¶kker kort fra bunken og ny v√¶rdi tilf√∏jes
                Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                var k = kortbunke.Tr√¶kKort();
                spiller.H√•nd.Add(k);
                Console.WriteLine($"   {spiller.Navn} trak: {k}");
                Console.WriteLine($" - {spiller.Navn}'s h√•nd: {spiller.H√•nd} ({spiller.H√•nd.VinderV√¶rdi()})");
                // hvis spillers v√¶rdi er for h√∏j, s√• er de bust
                if (spiller.H√•nd.ErBust())
                {
                    DealerH√•nd();
                    Console.WriteLine("Bust! Du tabte üôÅ");
                    return;
                }
            }
            else
            {
                // N√•r "hit" kaldes, tils√¶t spacing
                Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                spillerHandling = true;
            }
        }

        DealerH√•nd();

        // S√• l√¶nge dealers h√•nd er under 17, s√• tr√¶k kort, ellers s√• "stand"
        while (dealer.H√•nd.VinderV√¶rdi() < 17)
        {
            var k = kortbunke.Tr√¶kKort();
            dealer.H√•nd.Add(k);
            Console.WriteLine($"   Dealer trak: {k} ({dealer.H√•nd.VinderV√¶rdi()})");
        }

        // T√¶l h√•ndv√¶rdi p√• spiller og dealer. Udskriver resultatet.
        int spillerV√¶rdi = spiller.H√•nd.VinderV√¶rdi();
        int dealerV√¶rdi = dealer.H√•nd.VinderV√¶rdi();
        Console.WriteLine($"\nResultat: {spiller.Navn} {spillerV√¶rdi} vs Dealer {dealerV√¶rdi}");

        // Hvis dealer er bust, og spillers v√¶rdi er over dealer, s√• vinder spiller
        if (dealer.H√•nd.ErBust() || spillerV√¶rdi > dealerV√¶rdi)
        {
            Console.WriteLine("Tillykke du vandt! üëè");
        }
        // Hvis spiller og dealer h√•ndv√¶rdi er det samme, s√• uafgjort
        else if (spillerV√¶rdi == dealerV√¶rdi)
        {
            Console.WriteLine("Uafgjort.");
        }
        // Hvis dealers v√¶rdi er st√∏rre end spiller, s√• vinder dealer
        else
        {
            Console.WriteLine("Dealer vandt ");
        }
    }

    // Funktion til at fremvise Dealers h√•nd og v√¶rdi
    public void DealerH√•nd()
    {
        Console.WriteLine($"\n - Dealers h√•nd: {dealer.H√•nd} ({dealer.H√•nd.VinderV√¶rdi()})");
    }
}